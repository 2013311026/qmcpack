//////////////////////////////////////////////////////////////////////
// This file is distributed under the University of Illinois/NCSA Open Source
// License.  See LICENSE file in top directory for details.
//
// Copyright (c) 2016 Jeongnim Kim and QMCPACK developers.
//
// File developed by:
// Miguel A. Morales, moralessilva2@llnl.gov 
//    Lawrence Livermore National Laboratory 
//
// File created by:
// Miguel A. Morales, moralessilva2@llnl.gov 
//    Lawrence Livermore National Laboratory 
////////////////////////////////////////////////////////////////////////////////

#include <vector>
#include <map>
#include <string>
#include <iostream>
#include <tuple>

#include "AFQMC/config.h"
#include "AFQMC/Propagators/generate1BodyPropagator.hpp"
#include "AFQMC/Propagators/WalkerUpdate.hpp"
#include "AFQMC/Walkers/WalkerConfig.hpp"

namespace qmcplusplus
{

namespace afqmc
{

/*
 * Propagates the walker population nsteps forward with a fixed vbias (from the initial 
 * configuration).   
 */
template<class WlkSet>
void AFQMCSerialPropagator::step(int nsteps_, WlkSet& wset, RealType Eshift, RealType dt) 
{

  auto walker_type = wset.getWalkerType();
  int nsteps= nsteps_;
  int nwalk = wset.size();
  RealType sqrtdt = std::sqrt(dt);  
  long Gsize = wfn.size_of_G_for_vbias();
  long localnCV = wfn.local_number_of_cholesky_vectors();
  // if transposed_XXX_=true  --> XXX[nwalk][...], 
  // if transposed_XXX_=false --> XXX[...][nwalk]
  int vhs_nr = NMO*NMO, vhs_nc = nwalk*nsteps;
  if(transposed_vHS_) std::swap(vhs_nr,vhs_nc);
  int vhs3d_n1 = NMO, vhs3d_n2 = NMO, vhs3d_n3 = nwalk*nsteps;
  if(transposed_vHS_) {
    vhs3d_n1 = nwalk*nsteps;
    vhs3d_n2 = vhs3d_n3 = NMO; 
  }  
  int G_nr = Gsize, G_nc = nwalk;
  if(transposed_G_) std::swap(G_nr,G_nc);

  //  Shared buffer used for:
  //  G_for_vbias:     [ Gsize * nwalk ]
  //  vbias:           [ localnCV * nwalk ]
  //  X:               [ localnCV * nwalk * nstep ]
  //  vHS:             [ NMO*NMO * nwalk * nstep ]      
  // memory_needs: nwalk * ( 2*nsteps + Gsize + localnCV*(nstep+1) + NMO*NMO*nstep )
  size_t memory_needs = nwalk * ( Gsize + localnCV*(nsteps+1) + NMO*NMO*nsteps );

  // 0. Allocate memory and set shared memory structures
  if(buff.num_elements() < memory_needs ) 
    buff.reextent(extensions<1u>{memory_needs});
  size_t displ=0;
  // Mixed Density Matrix for walkers at original configuration
  // Actual dimensions depend on transposed_G_, see above
  CMatrix_ref G(buff.origin()+displ, {G_nr,G_nc}); 
    displ+=G_nr*G_nc; 
  // vias potential for walkers at original configuration
  CMatrix_ref vbias(buff.origin()+displ, {long(localnCV),long(nwalk)}); 
    displ+=localnCV*nwalk;
  // right hand side matrix in calculation of HS potential for all steps: ~ sigma + (vbias-vMF)
  // The same vbias is used in all steps
  CMatrix_ref X(buff.origin()+displ, {long(localnCV),long(nwalk*nsteps)}); 
    displ+=localnCV*nwalk*nsteps;
  // HS potential for all steps.
  // Actual dimensions depend on transposed_vHS_, see above
  CMatrix_ref vHS(buff.origin()+displ, {vhs_nr,vhs_nc}); 
  // second view of vHS matrix for use in propagation step
  // Actual dimensions depend on transposed_vHS_, see above
  boost::multi::array_ref<ComplexType,3> vHS3D(buff.origin()+displ, 
                                              {vhs3d_n1,vhs3d_n2,vhs3d_n3}); 

  // local matrices for temporary accumulation
  if(MFfactor.size(0) != nsteps || MFfactor.size(1) != nwalk) 
    MFfactor.reextent({long(nsteps),long(nwalk)});
  if(hybrid_weight.size(0) != nsteps || hybrid_weight.size(1) != nwalk) 
    hybrid_weight.reextent({long(nsteps),long(nwalk)});
  if(new_overlaps.size(0) != nwalk) new_overlaps.reextent(extensions<1u>{nwalk});
  if(new_energies.size(0) != nwalk || new_energies.size(1) != 3) 
    new_energies.reextent({long(nwalk),3});
  // these is only needed if vHS matrix has strides != 1, e.g. when transposed_vHS_ == false  
  if(not transposed_vHS_) {
    if(walker_type==NONCOLLINEAR)
      if(local_vHS.size(0) != 2*NMO || local_vHS.size(1) != 2*NMO)
        local_vHS.reextent({2*NMO,2*NMO});
    else
      if(local_vHS.size(0) != NMO || local_vHS.size(1) != NMO)
        local_vHS.reextent({NMO,NMO});
  }  

  // if timestep changed, recalculate one body propagator
  if( std::abs(dt-old_dt) > 1e-6 ) {
    old_dt = dt;
    P1 = std::move(generate1BodyPropagator(TG,1e-8,dt,H1)); 
  }
  // 1. Calculate Green function for all walkers
  AFQMCTimers[G_for_vbias_timer]->start();
  wfn.MixedDensityMatrix_for_vbias(wset,G);
  AFQMCTimers[G_for_vbias_timer]->stop();

  // 2. Calculate vbias for initial configuration
  AFQMCTimers[vbias_timer]->start();
  if (free_projection) {
    fill_n(vbias.origin(), localnCV*nwalk, ComplexType(0.0,0.0));
  } else {
    wfn.vbias(G,vbias,sqrtdt);
  }
  AFQMCTimers[vbias_timer]->stop();

  // 3. Assemble X(nCV,nsteps,nwalk)
  assemble_X(nsteps,nwalk,sqrtdt,X,vbias,MFfactor,hybrid_weight);

  // 4. Calculate vHS(M*M,nsteps,nwalk)/vHS(nsteps,nwalk,M*M)
  AFQMCTimers[vHS_timer]->start();
  wfn.vHS(X,vHS,sqrtdt);
  AFQMCTimers[vHS_timer]->stop();

  for(int ni=0; ni<nsteps_; ni++) {

    // 5. Propagate walkers
    AFQMCTimers[propagate_timer]->start();
    if (wset.getNBackProp() > 0) {
      apply_propagators_construct_propagator(wset,ni,vHS3D);
    } else {
      apply_propagators(wset,ni,vHS3D);
    }
    AFQMCTimers[propagate_timer]->stop();

    // 6. Calculate local energy/overlap
    AFQMCTimers[pseudo_energy_timer]->start();
    if(hybrid) {
      wfn.Overlap(wset,new_overlaps);
    } else {
      wfn.Energy(wset,new_energies,new_overlaps);
    }
    TG.local_barrier();
    AFQMCTimers[pseudo_energy_timer]->stop();

    // 7. update weights/energy/etc, apply constrains/bounds/etc 
    // simple round-robin
    for(int iw=0; iw<nwalk; ++iw) { 
      if(free_projection) { 
        free_projection_walker_update(wset[iw],dt,new_overlaps[iw],
                         MFfactor[ni][iw],Eshift,hybrid_weight[ni][iw]);
      } else if(hybrid) {
        hybrid_walker_update(wset[iw],dt,apply_constrain,importance_sampling,
                         Eshift,new_overlaps[iw],MFfactor[ni][iw],hybrid_weight[ni][iw]);
      } else {
        local_energy_walker_update(wset[iw],dt,apply_constrain,Eshift,
                                   new_overlaps[iw],new_energies[iw],
                                   MFfactor[ni][iw],hybrid_weight[ni][iw]);
      }
    }
  }  
}

template<class WSet>
void AFQMCSerialPropagator::apply_propagators(WSet& wset, int ni, C3Tensor_ref& vHS3D)
{  
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();
  if(nbatched_propagation > 0) {
    std::vector<ComplexType*> 
FINISH FINISH FINISH!!!!
  } else {
    if(transposed_vHS_) {
      // vHS3D[nstep*nwalk][M][M]
      if(walker_type == COLLINEAR) {
        for(int iw=0; iw<nwalk; ++iw) {
          int nt = ni*nwalk+iw;
          SDetOp.Propagate(wset[iw].SlaterMatrix(Alpha),P1,vHS3D[nt],order);
          SDetOp.Propagate(wset[iw].SlaterMatrix(Beta),P1,vHS3D[nt],order);
        }
      } else {
        for(int iw=0; iw<nwalk; ++iw) {
          int nt = ni*nwalk+iw;
          SDetOp.Propagate(wset[iw].SlaterMatrix(Alpha),P1,vHS3D[nt],order);
        }
      }
    } else {  
      // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
      if(walker_type == COLLINEAR) {
        int nsz = vHS3D.size(0)*vHS3D.size(1);  
        for(int iw=0; iw<nwalk; ++iw) {
          int nt = ni*nwalk+iw;
          copy(nsz, vHS3D.origin()+nt, vHS3D.size(2), local_vHS.origin(), 1);
          SDetOp.Propagate(wset[iw].SlaterMatrix(Alpha),P1,local_vHS,order);
          SDetOp.Propagate(wset[iw].SlaterMatrix(Beta),P1,local_vHS,order);
        }
      } else {
        for(int iw=0; iw<nwalk; ++iw) {
          int nt = ni*nwalk+iw;
          copy(nsz, vHS3D.origin()+nt, vHS3D.size(2), local_vHS.origin(), 1);
          SDetOp.Propagate(wset[iw].SlaterMatrix(Alpha),P1,local_vHS,order);
        }
      }
    }
  }
  TG.local_barrier();
}

template<class WSet>
void AFQMCSerialPropagator::apply_propagators_construct_propagator(WSet& wset, int ni, int tk0, int tkN,
                                                                   int ntasks_total_serial,
                                                                   boost::multi::array_ref<ComplexType,3>& vHS3D)
{
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();
  if(transposed_vHS_) {
    // vHS3D[nstep*nwalk][M][M]
    if(walker_type == COLLINEAR) {
      // in this case, tk corresponds to 2x the walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, {NMO,NAEB});
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, {NMO,NAEB});
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
    } else {
      // in this case, tk corresponds to walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        CMatrix_ref B = wset[tk].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
        TAlpha = wset[tk].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[tk].SlaterMatrix(Alpha));
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        CMatrix_ref B = wset[iw].BMatrix();
        SDetOp.Propagate(B,P1,vHS3D[nt],order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
        TAlpha = wset[iw].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw].SlaterMatrix(Alpha));
      }
    }
  } else {
    // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
    if(walker_type == COLLINEAR) {
      int oldw=-1;
      // in this case, tk corresponds to 2x the walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        if(oldw != tk/2) {
          local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
          oldw=tk/2;
        }
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, {NMO,NAEB});
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        CMatrix_ref B = wset[tk/2].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        if(tk%2==0) {
          CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          CMatrix_ref TBeta = CMatrix_ref(TSM.data()+NMO*NAEA, {NMO,NAEB});
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
    } else {
      // in this case, tk corresponds to walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        CMatrix_ref B = wset[tk].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
        TAlpha = wset[tk].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[tk].SlaterMatrix(Alpha));
        wset[tk].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        CMatrix_ref B = wset[iw].BMatrix();
        SDetOp.Propagate(B,P1,local_vHS,order);
        CMatrix_ref TAlpha = CMatrix_ref(TSM.data(), {NMO,NAEA});
        TAlpha = wset[iw].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw].SlaterMatrix(Alpha));
        wset[iw].incrementBMatrix();
      }
    }
  }
  TG.local_barrier();
}

}

}

