//////////////////////////////////////////////////////////////////////
// This file is distributed under the University of Illinois/NCSA Open Source
// License.  See LICENSE file in top directory for details.
//
// Copyright (c) 2016 Jeongnim Kim and QMCPACK developers.
//
// File developed by:
// Miguel A. Morales, moralessilva2@llnl.gov 
//    Lawrence Livermore National Laboratory 
//
// File created by:
// Miguel A. Morales, moralessilva2@llnl.gov 
//    Lawrence Livermore National Laboratory 
////////////////////////////////////////////////////////////////////////////////

#include <vector>
#include <map>
#include <string>
#include <iostream>
#include <tuple>

#include "AFQMC/config.h"
#include "AFQMC/Propagators/generate1BodyPropagator.hpp"
#include "AFQMC/Propagators/WalkerSetUpdate.hpp"
#include "AFQMC/Walkers/WalkerConfig.hpp"

namespace qmcplusplus
{

namespace afqmc
{

/*
 * Propagates the walker population nsteps forward with a fixed vbias (from the initial 
 * configuration).   
 */
template<class WlkSet>
void AFQMCBasePropagator::step(int nsteps_, WlkSet& wset, RealType Eshift, RealType dt) 
{ 
  AFQMCTimers[setup_timer]->start();
  auto walker_type = wset.getWalkerType();
  int nsteps= nsteps_;
  int nwalk = wset.size();
  RealType sqrtdt = std::sqrt(dt);  
  long Gsize = wfn.size_of_G_for_vbias();
  long localnCV = wfn.local_number_of_cholesky_vectors();
  // if transposed_XXX_=true  --> XXX[nwalk][...], 
  // if transposed_XXX_=false --> XXX[...][nwalk]
  int vhs_nr = NMO*NMO, vhs_nc = nwalk*nsteps;
  if(transposed_vHS_) std::swap(vhs_nr,vhs_nc);
  int vhs3d_n1 = NMO, vhs3d_n2 = NMO, vhs3d_n3 = nwalk*nsteps;
  if(transposed_vHS_) {
    vhs3d_n1 = nwalk*nsteps;
    vhs3d_n2 = vhs3d_n3 = NMO; 
  }  
  int G_nr = Gsize, G_nc = nwalk;
  if(transposed_G_) std::swap(G_nr,G_nc);


  //  shared buffer used for:
  //  G_for_vbias:     [ Gsize * nwalk ]
  //  vbias:           [ localnCV * nwalk ]
  //  X:               [ localnCV * nwalk * nstep ]
  //  vHS:             [ NMO*NMO * nwalk * nstep ]      
  // memory_needs: nwalk * ( 2*nsteps + Gsize + localnCV*(nstep+1) + NMO*NMO*nstep )
  size_t memory_needs = nwalk * ( Gsize + localnCV*(nsteps+1) + NMO*NMO*nsteps );

  // 0. Allocate memory and set shared memory structures
  if(buffer.num_elements() < memory_needs ) { 
    buffer = std::move(CVector(iextensions<1u>{memory_needs}));
    using std::fill_n;
    fill_n(buffer.origin(),buffer.num_elements(),ComplexType(0.0));
  }  

  // convert array to a basic_array<element,1,pointer>. This generates a view of buffer 
  // with type basic_array<ComplexType,1,pointer> which eliminates the need to cast origin()  
  auto mem_pool(boost::multi::static_array_cast<ComplexType, pointer>(buffer));
  //auto mem_pool(array_cast<pointer>(buffer));

  size_t displ=0;
  // Mixed Density Matrix for walkers at original configuration
  // Actual dimensions depend on transposed_G_, see above
  CMatrix_ref G(mem_pool.origin()+displ, {G_nr,G_nc}); 
    displ+=G_nr*G_nc; 
  // vias potential for walkers at original configuration
  CMatrix_ref vbias(mem_pool.origin()+displ, {long(localnCV),long(nwalk)}); 
    displ+=localnCV*nwalk;
  // right hand side matrix in calculation of HS potential for all steps: ~ sigma + (vbias-vMF)
  // The same vbias is used in all steps
  CMatrix_ref X(mem_pool.origin()+displ, {long(localnCV),long(nwalk*nsteps)}); 
    displ+=localnCV*nwalk*nsteps;
  // HS potential for all steps.
  // Actual dimensions depend on transposed_vHS_, see above
  CMatrix_ref vHS(mem_pool.origin()+displ, {vhs_nr,vhs_nc}); 
  // second view of vHS matrix for use in propagation step
  // Actual dimensions depend on transposed_vHS_, see above
  C3Tensor_ref vHS3D(mem_pool.origin()+displ,{vhs3d_n1,vhs3d_n2,vhs3d_n3}); 

  // local matrices for temporary accumulation
// MAM: Note -  Since nsteps can change routinely, don't reextent these.
//              Instead have a buffer and create array_refs from them!!!
  if(MFfactor.size(0) != nsteps || MFfactor.size(1) != nwalk) 
    MFfactor = std::move(CMatrix({long(nsteps),long(nwalk)}));
  if(hybrid_weight.size(0) != nsteps || hybrid_weight.size(1) != nwalk) 
    hybrid_weight = std::move(CMatrix({long(nsteps),long(nwalk)}));
  if(new_overlaps.size(0) != nwalk) new_overlaps = std::move(CVector(iextensions<1u>{nwalk}));
  if(new_energies.size(0) != nwalk || new_energies.size(1) != 3) 
    new_energies = std::move(CMatrix({long(nwalk),3}));

  // if timestep changed, recalculate one body propagator
  if( std::abs(dt-old_dt) > 1e-6 ) {
    old_dt = dt;
    // generate1BodyPropagator currently expects a shared_allocator, fix later
    using P1shm = ma::sparse::csr_matrix<ComplexType,int,int,
                                shared_allocator<ComplexType>,
                                ma::sparse::is_root>;
    P1 = std::move(generate1BodyPropagator<P1shm>(TG,1e-8,dt,H1)); 
  }
  AFQMCTimers[setup_timer]->stop();

  // 1. Calculate Green function for all walkers
  AFQMCTimers[G_for_vbias_timer]->start();
  wfn.MixedDensityMatrix_for_vbias(wset,G);
  AFQMCTimers[G_for_vbias_timer]->stop();
//std::cout<<" G: " <<ma::dot(G(G.extension(0),0),G(G.extension(0),0)) <<std::endl;

  // 2. Calculate vbias for initial configuration
  AFQMCTimers[vbias_timer]->start();
  if (free_projection) {
    fill_n(vbias.origin(), localnCV*nwalk, ComplexType(0.0,0.0));
  } else {
    wfn.vbias(G,vbias,sqrtdt);
  }
  AFQMCTimers[vbias_timer]->stop();
//std::cout<<" vbias: " <<ma::dot(vbias(vbias.extension(0),0),vbias(vbias.extension(0),0)) <<std::endl;

  // 3. Assemble X(nCV,nsteps,nwalk)
  AFQMCTimers[assemble_X_timer]->start();
  assemble_X(nsteps,nwalk,sqrtdt,X,vbias,MFfactor,hybrid_weight);
  if(TG.TG_local().size() > 1) {
    TG.TG_local().all_reduce_in_place_n(to_address(MFfactor.origin()),MFfactor.num_elements(),
                                        std::plus<>());  
    TG.TG_local().all_reduce_in_place_n(to_address(hybrid_weight.origin()),
                                        hybrid_weight.num_elements(),std::plus<>());  
  }  
  AFQMCTimers[assemble_X_timer]->stop();
//std::cout<<" X: " <<ma::dot(X(X.extension(0),0),X(X.extension(0),0)) <<std::endl;

  // 4. Calculate vHS(M*M,nsteps,nwalk)/vHS(nsteps,nwalk,M*M)
  AFQMCTimers[vHS_timer]->start();
  wfn.vHS(X,vHS,sqrtdt);
  AFQMCTimers[vHS_timer]->stop();
//std::cout<<" vHS: " <<ma::dot(vHS[0],vHS[0]) <<"\n\n" <<std::endl;

  int nx = 1;
  if(walker_type == COLLINEAR) nx=2;

  // from now on, individual work on each walker/step
  const int ntasks_per_core = int(nx*nwalk)/TG.getNCoresPerTG();
  const int ntasks_total_serial = ntasks_per_core*TG.getNCoresPerTG();
  const int nextra = int(nx*nwalk) - ntasks_total_serial;

  // each processor does ntasks_percore_serial overlaps serially
  const int tk0 = TG.getLocalTGRank()*ntasks_per_core;
  const int tkN = (TG.getLocalTGRank()+1)*ntasks_per_core;

  // make new communicator if nextra changed from last setting
  reset_nextra(nextra);

  for(int ni=0; ni<nsteps_; ni++) {

    // 5. Propagate walkers
    AFQMCTimers[propagate_timer]->start();
    if(nbatched_propagation != 0) { 
      if (wset.getNBackProp() > 0) {
        apply_propagators_construct_propagator_batched(wset,ni,vHS3D);
      } else {
        apply_propagators_batched(wset,ni,vHS3D);
      }
    } else {
      if (wset.getNBackProp() > 0) {
        apply_propagators_construct_propagator(wset,ni,tk0,tkN,ntasks_total_serial,vHS3D);
      } else {
        apply_propagators(wset,ni,tk0,tkN,ntasks_total_serial,vHS3D);
      }
    }
    AFQMCTimers[propagate_timer]->stop();

    // 6. Calculate local energy/overlap
    AFQMCTimers[pseudo_energy_timer]->start();
    if(hybrid) {
      wfn.Overlap(wset,new_overlaps);
    } else {
      wfn.Energy(wset,new_energies,new_overlaps);
    }
    TG.local_barrier();
    AFQMCTimers[pseudo_energy_timer]->stop();

    // 7. update weights/energy/etc, apply constrains/bounds/etc 
    AFQMCTimers[extra_timer]->start();
    if(TG.TG_local().root()) { 
      if(free_projection) { 
        free_projection_walker_update(wset,dt,new_overlaps,
                         MFfactor[ni],Eshift,hybrid_weight[ni],work);
      } else if(hybrid) {
        hybrid_walker_update(wset,dt,apply_constrain,importance_sampling,
                         Eshift,new_overlaps,MFfactor[ni],hybrid_weight[ni],work);
      } else {
        local_energy_walker_update(wset,dt,apply_constrain,Eshift,
                                   new_overlaps,new_energies,
                                   MFfactor[ni],hybrid_weight[ni],work);
      }
    }
    TG.local_barrier();
    AFQMCTimers[extra_timer]->stop();

  }  
}


template<class WSet>
void AFQMCBasePropagator::apply_propagators(WSet& wset, int ni, int tk0, int tkN, 
                                              int ntasks_total_serial,
                                              C3Tensor_ref& vHS3D)
{  
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();

  if(transposed_vHS_) {
    // vHS3D[nstep*nwalk][M][M]
    if(walker_type == COLLINEAR) {
      // in this case, tk corresponds to 2x the walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        if(tk%2==0)
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,vHS3D[nt],order);
        else
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Beta),P1,vHS3D[nt],order);
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        if(tk%2==0)
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,vHS3D[nt],local_group_comm,order);
        else
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Beta),P1,vHS3D[nt],local_group_comm,order);
      }
    } else {
      // in this case, tk corresponds to walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        SDetOp->Propagate(wset[tk].SlaterMatrix(Alpha),P1,vHS3D[nt],order);
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        SDetOp->Propagate(wset[iw].SlaterMatrix(Alpha),P1,vHS3D[nt],local_group_comm,order);
      }
    }
  } else {  
    if(walker_type==NONCOLLINEAR) {
      if(local_vHS.size(0) != 2*NMO || local_vHS.size(1) != 2*NMO)
        local_vHS = std::move(CMatrix({2*NMO,2*NMO}));
    } else {
      if(local_vHS.size(0) != NMO || local_vHS.size(1) != NMO)
        local_vHS = std::move(CMatrix({NMO,NMO}));
    }
    // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
    if(walker_type == COLLINEAR) {
      int oldw=-1;
      // in this case, tk corresponds to 2x the walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        if(oldw != tk/2) { 
          local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
          oldw=tk/2;
        }
        if(tk%2==0)
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,local_vHS,order);
        else
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Beta),P1,local_vHS,order);
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        if(tk%2==0)
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Alpha),P1,local_vHS,local_group_comm,order);
        else
          SDetOp->Propagate(wset[tk/2].SlaterMatrix(Beta),P1,local_vHS,local_group_comm,order);
      }
    } else {
      // in this case, tk corresponds to walker number  
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        SDetOp->Propagate(wset[tk].SlaterMatrix(Alpha),P1,local_vHS,order);
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        SDetOp->Propagate(wset[iw].SlaterMatrix(Alpha),P1,local_vHS,local_group_comm,order);
      }
    }
  }
  TG.local_barrier();
}

template<class WSet>
void AFQMCBasePropagator::apply_propagators_batched(WSet& wset, int ni, C3Tensor_ref& vHS3D)
{  
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();
  int nbatch = (nbatched_propagation<0?nwalk:nbatched_propagation); 
  std::vector<CMatrix_ref> Ai; 
  Ai.reserve(nbatch);
  if(transposed_vHS_) {
    // vHS3D[nstep*nwalk][M][M]
    // in this case, tk corresponds to 2x the walker number  
    int nt = ni*nwalk;
    for(int iw=0; iw<nwalk; iw+=nbatch, nt+=nbatch) { 
      int nb = std::min(nbatch,nwalk-iw);
      Ai.clear();
      for(int ni=0; ni<nb; ni++) Ai.emplace_back(wset[iw+ni].SlaterMatrix(Alpha));
      SDetOp->BatchedPropagate(Ai,P1,vHS3D.sliced(nt,nt+nb),order);
      if(walker_type == COLLINEAR) { 
        Ai.clear();
        for(int ni=0; ni<nb; ni++) Ai.emplace_back(wset[iw+ni].SlaterMatrix(Beta));
        SDetOp->BatchedPropagate(Ai,P1,vHS3D.sliced(nt,nt+nb),order);
      }  
    }
  } else {  
    int sz = (walker_type==NONCOLLINEAR?2*NMO:NMO);
    if(local_vHS.size(0) != nbatch || local_vHS.size(1) != sz*sz)
      local_vHS = std::move(CMatrix({nbatch,sz*sz}));
    // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
    int N2 = vHS3D.size(0)*vHS3D.size(1);
    CMatrix_ref vHS2D(vHS3D.origin(),{N2,vHS3D.size(2)}); 
    C3Tensor_ref local3D(local_vHS.origin(),{nbatch,sz,sz}); 
    int nt = ni*nwalk;
    for(int iw=0; iw<nwalk; iw+=nbatch, nt+=nbatch) {
      int nb = std::min(nbatch,nwalk-iw);
      ma::transpose(vHS2D(vHS2D.extension(0),{nt,nt+nb}),local_vHS.sliced(0,nb));  
      Ai.clear();
      for(int ni=0; ni<nb; ni++) Ai.emplace_back(wset[iw+ni].SlaterMatrix(Alpha));
      SDetOp->BatchedPropagate(Ai,P1,local3D.sliced(0,nb),order);
      if(walker_type == COLLINEAR) {
        Ai.clear();
        for(int ni=0; ni<nb; ni++) Ai.emplace_back(wset[iw+ni].SlaterMatrix(Beta));
        SDetOp->BatchedPropagate(Ai,P1,local3D.sliced(0,nb),order);
      }  
    }
  }
}

template<class WSet>
void AFQMCBasePropagator::apply_propagators_construct_propagator(WSet& wset, 
                        int ni, int tk0, int tkN, int ntasks_total_serial,
                        C3Tensor_ref& vHS3D)
{
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();
  auto TAlpha(TSM({0,NMO},{0,NAEA}));
  auto TBeta(TSM({0,NMO},{0,NAEB})); 
  if(transposed_vHS_) {
    // vHS3D[nstep*nwalk][M][M]
    if(walker_type == COLLINEAR) {
      // in this case, tk corresponds to 2x the walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        auto B(wset[tk/2].BMatrix());
        SDetOp->Propagate(B,P1,vHS3D[nt],order);
        if(tk%2==0) {
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        auto B(wset[tk/2].BMatrix());
        SDetOp->Propagate(B,P1,vHS3D[nt],order);
        if(tk%2==0) {
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
    } else {
      // in this case, tk corresponds to walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        auto B(wset[tk].BMatrix());
        SDetOp->Propagate(B,P1,vHS3D[nt],order);
        TAlpha = wset[tk].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[tk].SlaterMatrix(Alpha));
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        auto B(wset[iw].BMatrix());
        SDetOp->Propagate(B,P1,vHS3D[nt],order);
        TAlpha = wset[iw].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw].SlaterMatrix(Alpha));
      }
    }
  } else {
    if(walker_type==NONCOLLINEAR) {
      if(local_vHS.size(0) != 2*NMO || local_vHS.size(1) != 2*NMO)
        local_vHS = std::move(CMatrix({2*NMO,2*NMO}));
    } else {
      if(local_vHS.size(0) != NMO || local_vHS.size(1) != NMO)
        local_vHS = std::move(CMatrix({NMO,NMO}));
    }
    // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
    if(walker_type == COLLINEAR) {
      int oldw=-1;
      // in this case, tk corresponds to 2x the walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk/2;
        if(oldw != tk/2) {
          local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
          oldw=tk/2;
        }
        auto B(wset[tk/2].BMatrix());
        SDetOp->Propagate(B,P1,local_vHS,order);
        if(tk%2==0) {
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int tk = (ntasks_total_serial+last_task_index);
        int nt = ni*nwalk+tk/2;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        auto B(wset[tk/2].BMatrix());
        SDetOp->Propagate(B,P1,local_vHS,order);
        if(tk%2==0) {
          TAlpha = wset[tk/2].SlaterMatrix(Alpha);
          ma::product(B, TAlpha, wset[tk/2].SlaterMatrix(Alpha));
        } else {
          TBeta = wset[tk/2].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[tk/2].SlaterMatrix(Beta));
        }
        wset[tk/2].incrementBMatrix();
      }
    } else {
      // in this case, tk corresponds to walker number
      for(int tk=tk0; tk<tkN; ++tk) {
        int nt = ni*nwalk+tk;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        auto B(wset[tk].BMatrix());
        SDetOp->Propagate(B,P1,local_vHS,order);
        TAlpha = wset[tk].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[tk].SlaterMatrix(Alpha));
        wset[tk].incrementBMatrix();
      }
      if(last_nextra > 0) {
        int iw = ntasks_total_serial+last_task_index;
        int nt = ni*nwalk+iw;
        local_vHS = vHS3D(local_vHS.extension(0),local_vHS.extension(1),nt);
        auto B(wset[iw].BMatrix());
        SDetOp->Propagate(B,P1,local_vHS,order);
        TAlpha = wset[iw].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw].SlaterMatrix(Alpha));
        wset[iw].incrementBMatrix();
      }
    }
  }
  TG.local_barrier();
}

template<class WSet>
void AFQMCBasePropagator::apply_propagators_construct_propagator_batched(WSet& wset, 
                        int ni, C3Tensor_ref& vHS3D)
{
  int nwalk = wset.size();
  auto walker_type = wset.getWalkerType();
  auto TAlpha(TSM({0,NMO},{0,NAEA}));
  auto TBeta(TSM({0,NMO},{0,NAEB})); 
  int nbatch = (nbatched_propagation<0?nwalk:nbatched_propagation);
  std::vector<CMatrix_ref> Ai;
  Ai.reserve(nbatch);
  if(transposed_vHS_) {
    // vHS3D[nstep*nwalk][M][M]
    // in this case, tk corresponds to 2x the walker number  
    int nt = ni*nwalk;
    for(int iw=0; iw<nwalk; iw+=nbatch, nt+=nbatch) {
      int nb = std::min(nbatch,nwalk-iw);
      Ai.clear();
      for(int ni=0; ni<nb; ni++) Ai.emplace_back(wset[iw+ni].BMatrix());
      SDetOp->BatchedPropagate(Ai,P1,vHS3D.sliced(nt,nt+nb),order);
      // this could be batched too!!!
      for(int ni=0; ni<nb; ni++) {
        auto B(wset[iw+ni].BMatrix());
        TAlpha = wset[iw+ni].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw+ni].SlaterMatrix(Alpha));
        if(walker_type == COLLINEAR) {
          TBeta = wset[iw+ni].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[iw+ni].SlaterMatrix(Beta));
        }
        wset[iw+ni].incrementBMatrix();
      }
    }
  } else {
    int sz = (walker_type==NONCOLLINEAR?2*NMO:NMO);
    if(local_vHS.size(0) != nbatch || local_vHS.size(1) != sz*sz)
      local_vHS = std::move(CMatrix({nbatch,sz*sz}));
    // vHS3D[M][M][nstep*nwalk]: need temporary buffer in this case
    int N2 = vHS3D.size(0)*vHS3D.size(1);
    CMatrix_ref vHS2D(vHS3D.origin(),{N2,vHS3D.size(2)});
    C3Tensor_ref local3D(local_vHS.origin(),{nbatch,sz,sz});
    int nt = ni*nwalk;
    for(int iw=0; iw<nwalk; iw+=nbatch, nt+=nbatch) {
      int nb = std::min(nbatch,nwalk-iw);
      ma::transpose(vHS2D(vHS2D.extension(0),{nt,nt+nb}),local_vHS.sliced(0,nb));
      Ai.clear();
      for(int ni=0; ni<nb; ni++) Ai.emplace_back(wset[iw+ni].BMatrix());
      SDetOp->BatchedPropagate(Ai,P1,local3D.sliced(0,nb),order);
      // this could be batched too!!!
      for(int ni=0; ni<nb; ni++) {
        auto B(wset[iw+ni].BMatrix());
        TAlpha = wset[iw+ni].SlaterMatrix(Alpha);
        ma::product(B, TAlpha, wset[iw+ni].SlaterMatrix(Alpha));
        if(walker_type == COLLINEAR) {
          TBeta = wset[iw+ni].SlaterMatrix(Beta);
          ma::product(B, TBeta, wset[iw+ni].SlaterMatrix(Beta));
        }
        wset[iw+ni].incrementBMatrix();
      }
    }
  }
}

}

}

