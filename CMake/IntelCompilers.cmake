# compiler flags for intel 8.x, 9.x, 10.x, 11.x
# check the version and warn users if older compilers are being used
# SSE4.2 option is available for 11.1  and higher

# common options for intel compilers
#enable Interprocedural (IP) Optimizations
set(INTEL_COMPILER 1)
add_definitions(-DADD_ -DINLINE_ALL=inline)
set(ENABLE_OPENMP 1)
set(INTEL_OPTS "-g -restrict -unroll -O3 -ip -openmp")


#grep icpc version and determine what options to be used
exec_program(icpc  
  ARGS -v
  OUTPUT_VARIABLE ICPC_OUTPUT
  RETURN_VALUE ICPC_INFO
  )

STRING(REGEX MATCH "[0-9]+" ICPC_VERSION "${ICPC_OUTPUT}")
STRING(REGEX REPLACE "[0-9]+\\.([0-9]+)" "\\1" ICPC_MINOR_VERSION "${ICPC_OUTPUT}")

# Use deprecated options prior to 11.1
SET(ICC_DEPRECATED_OPTS FALSE)
IF(ICPC_VERSION LESS 11)
  SET(ICC_DEPRECATED_OPTS TRUE)
ELSE(ICPC_VERSION LESS 11)
  IF(ICPC_MINOR_VERSION LESS 1)
    SET(ICC_DEPRECATED_OPTS TRUE)
  ENDIF(ICPC_MINOR_VERSION LESS 1)
ENDIF(ICPC_VERSION LESS 11)

#check if -xHost is accepted
SET(CMAKE_TRY_ICC_FLAGS "-xHost")
CHECK_C_COMPILER_FLAG(${CMAKE_TRY_ICC_FLAGS} INTEL_CC_FLAGS)
IF(INTEL_CC_FLAGS)
  SET(INTEL_OPTS "${INTEL_OPTS} ${CMAKE_TRY_ICC_FLAGS}")
ENDIF(INTEL_CC_FLAGS)

#check if -ftz is accepted
SET(CMAKE_TRY_ICC_FLAGS "-ftz")
CHECK_C_COMPILER_FLAG(${CMAKE_TRY_ICC_FLAGS} INTEL_CC_FLAGS)
IF(INTEL_CC_FLAGS)
  SET(INTEL_OPTS "${INTEL_OPTS} ${CMAKE_TRY_ICC_FLAGS}")
ENDIF(INTEL_CC_FLAGS)

IF(ICC_DEPRECATED_OPTS)
  set(INTEL_OPTS "${INTEL_OPTS} -prefetch")
ELSE(ICC_DEPRECATED_OPTS)
  set(INTEL_OPTS "${INTEL_OPTS} -opt-prefetch")
ENDIF(ICC_DEPRECATED_OPTS)

#exec_program(grep  
#  ARGS flags /proc/cpuinfo
#  OUTPUT_VARIABLE CPU_FLAGS
#  RETURN_VALUE CPUINFO
#  )
#
#SET(HAVE_SSE4_2 0)
#SET(HAVE_SSE4_1 0)
#SET(HAVE_SSSE3 0)
#SET(HAVE_SSE3 0)
#SET(HAVE_SSE2 0)
#SET(HAVE_SSE 0)
#
#if(CPU_FLAGS MATCHES "sse4_2")
#  IF(ICC_DEPRECATED_OPTS)
#    MESSAGE(WARNING "SSE4.2 needs version 11.1 and higher.")
#  ELSE(ICC_DEPRECATED_OPTS)
#    SET(HAVE_SSE4_2 1)
#    IF(NOT SSE_OPT_SET)
#      SET(SSE_OPT_SET TRUE)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xSSE4.2")
#    ENDIF(NOT SSE_OPT_SET)
#  ENDIF(ICC_DEPRECATED_OPTS)
#endif(CPU_FLAGS MATCHES "sse4_2")
#
#if(CPU_FLAGS MATCHES "sse4_1")
#  SET(HAVE_SSE4_1 1)
#  IF(NOT SSE_OPT_SET)
#    SET(SSE_OPT_SET TRUE)
#    IF(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xS")
#    ELSE(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xSSE4.1")
#    ENDIF(ICC_DEPRECATED_OPTS)
#  ENDIF(NOT SSE_OPT_SET)
#endif(CPU_FLAGS MATCHES "sse4_1")
#
#if(CPU_FLAGS MATCHES "ssse3")
#  SET(HAVE_SSSE3 1)
#  IF(NOT SSE_OPT_SET)
#    SET(SSE_OPT_SET TRUE)
#    IF(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xT")
#    ELSE(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xSSSE3")
#    ENDIF(ICC_DEPRECATED_OPTS)
#  ENDIF(NOT SSE_OPT_SET)
#endif(CPU_FLAGS MATCHES "ssse3")
#
#if(CPU_FLAGS MATCHES "sse3")
#  SET(HAVE_SSE3 1)
#  IF(NOT SSE_OPT_SET)
#    SET(SSE_OPT_SET TRUE)
#    IF(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xP")
#    ELSE(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xSSE3")
#    ENDIF(ICC_DEPRECATED_OPTS)
#  ENDIF(NOT SSE_OPT_SET)
#endif(CPU_FLAGS MATCHES "sse3")
#
#if(CPU_FLAGS MATCHES "sse2")
#  SET(HAVE_SSE2 1)
#  IF(NOT SSE_OPT_SET)
#    SET(SSE_OPT_SET TRUE)
#    IF(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xN")
#    ELSE(ICC_DEPRECATED_OPTS)
#      SET(INTEL_OPTS "${INTEL_OPTS} -xSSE2")
#    ENDIF(ICC_DEPRECATED_OPTS)
#  ENDIF(NOT SSE_OPT_SET)
#endif(CPU_FLAGS MATCHES "sse2")


set(CMAKE_CXX_FLAGS "${INTEL_OPTS} $ENV{CXX_FLAGS} -Wno-deprecated")
set(CMAKE_C_FLAGS "${INTEL_OPTS} $ENV{CC_FLAGS} -std=c99 -Wno-deprecated")

#ifc -> ifort
#set(FORTRAN_LIBS " -lifcore -lifport")
set(F77 ifort)
set(F77OPTFLAGS  -fpp2 -O3)
set(F77FLAGS ${F77OPTFLAGS})

######################################################
#KCC needs to be used to build static libraries
######################################################
#set(CMAKE_AR xild) 
#set(CMAKE_CXX_CREATE_STATIC_LIBRARY "<CMAKE_AR> -lib -o <TARGET> <OBJECTS>")
